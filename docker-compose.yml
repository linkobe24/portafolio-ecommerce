services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: memorycard_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: memorycard
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - memorycard_network

  # pgAdmin (administrador visual de PostgreSQL)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: memorycard_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - memorycard_network

  # Backend API (FastAPI) - Descomentaremos en fases posteriores
  # backend:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   container_name: memorycard_backend
  #   restart: unless-stopped
  #   ports:
  #     - "8000:8000"
  #   environment:
  #     - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/memorycard
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   volumes:
  #     - ./backend:/app
  #   command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
  #   networks:
  #     - memorycard_network

  # Frontend (Next.js) - Agregaremos en etapas posteriores
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   container_name: memorycard_frontend
  #   restart: unless-stopped
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - NEXT_PUBLIC_API_URL=http://backend:8000
  #   depends_on:
  #     - backend
  #   volumes:
  #     - ./frontend:/app
  #   networks:
  #     - memorycard_network

volumes:
  postgres_data:
    name: memorycard_postgres_data

networks:
  memorycard_network:
    name: memorycard_network
    driver: bridge
